{"version":3,"sources":["Components/Circles/Circles.jsx","Components/CircleSelector/CircleSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Circles","props","className","selected","CircleSelector","handleChange","event","onChange","target","value","onClick","App","changeClass","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAceA,G,YAXC,SAACC,GAAD,OAEd,yBAAKC,UAAU,WACb,yBAAKA,UAA8B,MAAnBD,EAAME,UAAmB,YAAzC,KACA,yBAAKD,UAA8B,MAAnBD,EAAME,UAAmB,YAAzC,KACA,yBAAKD,UAA8B,MAAnBD,EAAME,UAAmB,YAAzC,KACA,yBAAKD,UAA8B,MAAnBD,EAAME,UAAmB,YAAzC,Q,MCiCWC,MAvCf,SAAwBH,GACtB,IAAMI,EAAe,SAAAC,GACnBL,EAAMM,SAASD,EAAME,OAAOC,QAG9B,GAAIR,EAAME,SACR,OACE,yBAAKD,UAAU,kBACb,4BACEO,MAAM,IACNC,QAASL,EACTH,UAA8B,MAAnBD,EAAME,UAAmB,YAChB,MAAnBF,EAAME,SAAmB,mBAAqB,mBAEjD,4BACEM,MAAM,IACNC,QAASL,EACTH,UAA8B,MAAnBD,EAAME,UAAmB,YAChB,MAAnBF,EAAME,SAAmB,mBAAqB,mBAEjD,4BACEM,MAAM,IACNC,QAASL,EACTH,UAA8B,MAAnBD,EAAME,UAAmB,YAChB,MAAnBF,EAAME,SAAmB,mBAAqB,mBAEjD,4BACEM,MAAM,IACNC,QAASL,EACTH,UAA8B,MAAnBD,EAAME,UAAmB,YAChB,MAAnBF,EAAME,SAAmB,mBAAqB,qBCM1CQ,E,YAhCb,aAAc,IAAD,8BACX,+CAMFC,YAAc,SAACT,GACb,EAAKU,SAAS,CACZV,SAAUA,KAPV,EAAKW,MAAQ,CACXX,SAAkB,KAHX,E,sEAcX,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACEC,SAAUY,KAAKD,MAAMX,SACrBI,SAAUQ,KAAKH,cAEjB,kBAAC,EAAD,CACET,SAAUY,KAAKD,MAAMX,iB,GAxBfa,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2111d045.chunk.js","sourcesContent":["import React from 'react';\nimport '../Circles/Circles.css';\n\nconst Circles = (props) => (\n  \n  <div className='Circles'>\n    <div className={props.selected === '1' ? 'selected' : true}>1</div>\n    <div className={props.selected === '2' ? 'selected' : true}>2</div>\n    <div className={props.selected === '3' ? 'selected' : true}>3</div>\n    <div className={props.selected === '4' ? 'selected' : true}>4</div>\n  </div>\n\n)\n//<div className={<conditional expression> ? 'selected' : 'null'}>\nexport default Circles;","import React from 'react';\nimport '../CircleSelector/CircleSelector.css';\n\nfunction CircleSelector(props) {\n  const handleChange = event => {\n    props.onChange(event.target.value);\n  };\n\n  if (props.selected)\n    return (\n      <div className=\"CircleSelector\">\n        <button \n          value=\"1\"\n          onClick={handleChange}\n          className={props.selected === \"1\" ? \"selected\" : false}>\n          {props.selected === \"1\" ? \"CIRLE 1 SELECTED\" : \"Select Circle 1\"}  \n        </button>\n        <button \n          value=\"2\"\n          onClick={handleChange}\n          className={props.selected === \"2\" ? \"selected\" : false}>\n          {props.selected === \"2\" ? \"CIRLE 2 SELECTED\" : \"Select Circle 2\"}  \n        </button>\n        <button \n          value=\"3\"\n          onClick={handleChange}\n          className={props.selected === \"3\" ? \"selected\" : false}>\n          {props.selected === \"3\" ? \"CIRLE 3 SELECTED\" : \"Select Circle 3\"}  \n        </button>\n        <button \n          value=\"4\"\n          onClick={handleChange}\n          className={props.selected === \"4\" ? \"selected\" : false}>\n          {props.selected === \"4\" ? \"CIRLE 4 SELECTED\" : \"Select Circle 4\"}  \n        </button>\n       \n\n      </div>\n    );\n}\n\n//<div className={<conditional expression> ? 'name-of-class' : ''}>\nexport default CircleSelector;","import React, { Component } from 'react';\nimport './App.css';\nimport Circles from '../src/Components/Circles/Circles'\nimport CircleSelector from '../src/Components/CircleSelector/CircleSelector'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n      this.state = {\n        selected: true && '1',\n      }\n  }\n\n  changeClass = (selected) =>{\n    this.setState({\n      selected: selected\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector \n            selected={this.state.selected}\n            onChange={this.changeClass}\n          />\n          <Circles \n            selected={this.state.selected}\n          />\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}